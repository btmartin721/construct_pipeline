structure2conStruct(infile = str.file,
onerowperind = FALSE,
start.loci = 3,
missing.datum = -9,
outfile = "construct.out")
# Read input files specified on command-line
str.file <- read.infile(opt$str)
popmap.file <- read.infile(opt$popmap)
## FUNCTIONS ##
read.infile <- function(infile) {
if(!is.null(infile)) {
if (!file.exists(infile)) {
stop("Error: Could not find required input file; aborting program")
}
file <- read.table(infile,
header = FALSE,
sep = "\t",
stringsAsFactors = FALSE)
return(file)
}
else {
return(NULL)
}
}
# Read input files specified on command-line
str.file <- read.infile(opt$str)
popmap.file <- read.infile(opt$popmap)
if (!require("conStruct")) stop("Error: The required package conStruct is not installed")
if (!require("optparse")) stop("Error: The required package optparse is not installed")
structure2conStruct(infile = str.file,
onerowperind = FALSE,
start.loci = 3,
missing.datum = -9,
outfile = "construct.out")
# Set command-line arguments
option_list <- list(make_option(c("-s", "--str"),
type="character",
default=NULL,
help="Input structure filename; default = NULL",
metavar="character"),
make_option(c("-p", "--popmap"),
type="character",
default=NULL,
help="Input popmap filename; default = NULL",
metavar="character"),
make_option(c("-w", "--wd"),
type="character",
default="./",
metavar="character",
help="Set working directory; default = ./"))
opt_parser <- OptionParser(option_list=option_list,
description="Rscript to run conStruct")
opt <- parse_args(opt_parser)
# Read input files specified on command-line
str.file <- read.infile(opt$str)
popmap.file <- read.infile(opt$popmap)
structure2conStruct(infile = str.file,
onerowperind = FALSE,
start.loci = 3,
missing.datum = -9,
outfile = "construct.out")
afreq <- structure2conStruct(infile = opt$str,
onerowperind = FALSE,
start.loci = 3,
missing.datum = -9,
outfile = "construct.out")
afreq <- structure2conStruct(infile = opt$str,
onerowperind = FALSE,
start.loci = 3,
missing.datum = -9)
read.csv("BOX_filteredPops_FINAL.str",
sep="\t",
header=FALSE,
stringsAsFactors = FALSE)
str.file <- read.csv("BOX_filteredPops_FINAL.str",
sep="\t",
header=FALSE,
stringsAsFactors = FALSE)
popmap.file <- read.csv("BOX_popmap_FINAL4construct.txt",
sep="\t",
header = FALSE,
stringsAsFactors = FALSE)
geo.dist <- read.csv("BOX_geodist.csv",
header = FALSE,
stringsAsFactors = FALSE)
coords <- read.csv("coords.out.csv",
header = TRUE,
stringsAsFactors = FALSE)
afreq <- structure2conStruct(infile = "BOX_filteredPops_FINAL.str",
onerowperind = FALSE,
start.loci = 3,
missing.datum = -9,
outfile = "construct.out")
afreq <- structure2conStruct(infile = "BOX_filteredPops_FINAL.str",
onerowperind = FALSE,
start.loci = 3,
missing.datum = -9,
outfile = "construct.out")
pop.data.matrix <- matrix(NA,nrow=nrow(geo.dist),ncol=ncol(conStruct.data))
for(i in 1:nrow(pop.data.matrix)){
pop.data.matrix[i,] <- colMeans(
afreq[
which(pop.index==i),,
drop=FALSE
],na.rm=TRUE
)
}
pop.data.matrix <- matrix(NA,nrow=nrow(geo.dist),ncol=ncol(afreq))
for(i in 1:nrow(pop.data.matrix)){
pop.data.matrix[i,] <- colMeans(
afreq[
which(pop.index==i),,
drop=FALSE
],na.rm=TRUE
)
}
pop.index <- str.file$V2
pop.data.matrix <- matrix(NA,nrow=nrow(geo.dist),ncol=ncol(afreq))
for(i in 1:nrow(pop.data.matrix)){
pop.data.matrix[i,] <- colMeans(
afreq[
which(pop.index==i),,
drop=FALSE
],na.rm=TRUE
)
}
View(conStruct.data)
View(afreq)
for(i in 1:nrow(pop.data.matrix)){
pop.data.matrix[i,] <- colMeans(
afreq[
which(pop.index==i),,
drop=FALSE
],na.rm=TRUE
)
}
View(conStruct.data)
View(afreq)
pop.index <- str.file$V2
View(geo.dist)
pop.data.matrix <- matrix(NA,nrow=nrow(coords),ncol=ncol(afreq))
for(i in 1:nrow(pop.data.matrix)){
pop.data.matrix[i,] <- colMeans(
afreq[
which(pop.index==i),,
drop=FALSE
],na.rm=TRUE
)
}
pop.data.matrix <- matrix(NA,nrow=nrow(coords),ncol=ncol(afreq))
#!/usr/bin/env Rscript
# Make sure dependencies are installed and then load them
if (!require("conStruct")) stop("Error: The required package conStruct is not installed")
if (!require("optparse")) stop("Error: The required package optparse is not installed")
# Set command-line arguments
option_list <- list(make_option(c("-s", "--str"),
type="character",
default=NULL,
help="Input structure filename; default = NULL",
metavar="character"),
make_option(c("-p", "--popmap"),
type="character",
default=NULL,
help="Input popmap filename; default = NULL",
metavar="character"),
make_option(c("-g", "--geodist"),
type="character",
default=NULL,
help="Input geoDist matrix file (as CSV)",
metavar="character"),
make_option(c("-c", "--coords"),
type="character",
default=NULL,
help="Input coordinates file (as CSV)"),
make_option(c("-w", "--wd"),
type="character",
default="./",
metavar="character",
help="Set working directory; default = ./"))
opt_parser <- OptionParser(option_list=option_list,
description="Rscript to run conStruct")
opt <- parse_args(opt_parser)
#############################################################################
## FUNCTIONS ##
read.infile <- function(infile) {
if(!is.null(infile)) {
if (!file.exists(infile)) {
stop("Error: Could not find required input file; aborting program")
}
file <- read.table(infile,
header = FALSE,
sep = "\t",
stringsAsFactors = FALSE)
return(file)
}
else {
return(NULL)
}
}
setwd("~/Work/Scripts/construct_pipeline")
str.file <- read.csv("BOX_filteredPops_FINAL.str",
sep="\t",
header=FALSE,
stringsAsFactors = FALSE)
pop.index <- str.file$V2
popmap.file <- read.csv("BOX_popmap_FINAL4construct.txt",
sep="\t",
header = FALSE,
stringsAsFactors = FALSE)
geo.dist <- read.csv("BOX_geodist.csv",
header = FALSE,
stringsAsFactors = FALSE)
coords <- read.csv("coords.out.csv",
header = TRUE,
stringsAsFactors = FALSE)
# Formatting data
#vignette(topic="format-data",package="conStruct")
afreq <- structure2conStruct(infile = opt$str,
onerowperind = FALSE,
start.loci = 3,
missing.datum = -9,
outfile = "construct.out")
afreq <- structure2conStruct(infile = "BOX_filteredPops_FINAL.str",
onerowperind = FALSE,
start.loci = 3,
missing.datum = -9,
outfile = "construct.out")
afreq <- structure2conStruct(infile = opt$str,
onerowperind = FALSE,
start.loci = 3,
missing.datum = -9,
outfile = "construct.out")
afreq <- structure2conStruct(infile = "BOX_filteredPops_FINAL.str",
onerowperind = FALSE,
start.loci = 3,
missing.datum = -9,
outfile = "construct.out")
View(geo.dist)
View(popmap.file)
View(geo.dist)
View(afreq)
View(coords)
geo.dist <- read.csv("BOX_geodist.csv",
header = FALSE,
stringsAsFactors = FALSE)
coords <- read.csv("coords.out.csv",
header = TRUE,
stringsAsFactors = FALSE)
View(geo.dist)
for (i in 1:length(geo.dist)){
pop.index[i] <- i
}
oneInd.str <- str.file[!duplicated(str.file$V2, ]
oneInd.str <- str.file[!duplicated(str.file$V2), ]
oneInd.str <- str.file[!duplicated(str.file$V1), ]
pop.index <- oneInd.str$V2
pop.data.matrix <- matrix(NA,nrow=nrow(coords),ncol=ncol(afreq))
for(i in 1:nrow(pop.data.matrix)){
pop.data.matrix[i,] <- colMeans(
afreq[
which(pop.index==i),,
drop=FALSE
],na.rm=TRUE
)
}
View(pop.data.matrix)
str.file <- read.csv("BOX_filteredPops_FINAL2.str",
sep="\t",
header=FALSE,
stringsAsFactors = FALSE)
oneInd.str <- str.file[!duplicated(str.file$V1), ]
pop.index <- oneInd.str$V2
afreq <- structure2conStruct(infile = "BOX_filteredPops_FINAL2.str",
onerowperind = FALSE,
start.loci = 3,
missing.datum = -9,
outfile = "construct.out")
afreq <- structure2conStruct(infile = "BOX_filteredPops_FINAL2.str",
onerowperind = FALSE,
start.loci = 3,
missing.datum = -9,
outfile = "construct.out")
pop.data.matrix <- matrix(NA,nrow=nrow(coords),ncol=ncol(afreq))
for(i in 1:nrow(pop.data.matrix)){
pop.data.matrix[i,] <- colMeans(
afreq[
which(pop.index==i),,
drop=FALSE
],na.rm=TRUE
)
}
View(pop.data.matrix)
View(pop.data.matrix)
vignette(topic="run-conStruct",package="conStruct")
View(pop.data.matrix)
construct.run <- conStruct(spatial = TRUE,
K = 1,
freqs = pop.data.matrix,
geoDist = geo.dist,
coords = coords,
prefix = test,
n.chains = 1,
n.iter = 1000,
make.figs = TRUE,
save.files = TRUE)
construct.run <- conStruct(spatial = TRUE,
K = 1,
freqs = pop.data.matrix,
geoDist = geo.dist,
coords = coords,
prefix = "test",
n.chains = 1,
n.iter = 1000,
make.figs = TRUE,
save.files = TRUE)
construct.run <- conStruct(spatial = TRUE,
K = 1,
freqs = pop.data.matrix,
geoDist = geo.dist,
coords = coords,
prefix = "test",
n.chains = 1,
n.iter = 1000,
make.figs = TRUE,
save.files = TRUE)
coords <- matrix(read.infile(opt$coords, TRUE))
geo.dist <- matrix(read.infile(opt$geodist, FALSE))
popmap.file <- read.csv("BOX_popmap_FINAL4construct.txt",
sep="\t",
header = FALSE,
strigsAsFactors = FALSE)
geo.dist <- read.csv("BOX_geodist.csv",
sep="\t"
header = FALSE,
stringsAsFactors = FALSE)
coords <- read.csv("coords.out.csv",
sep="\t"
header = TRUE,
stringsAsFactors = FALSE)
popmap.file <- read.csv("BOX_popmap_FINAL4construct.txt",
sep="\t",
header = FALSE,
strigsAsFactors = FALSE)
geo.dist <- read.csv("BOX_geodist.csv",
sep="\t",
header = FALSE,
stringsAsFactors = FALSE)
coords <- read.csv("coords.out.csv",
sep="\t",
header = TRUE,
stringsAsFactors = FALSE)
popmap.file <- read.csv("BOX_popmap_FINAL4construct.txt",
sep="\t",
header = FALSE,
strigsAsFactors = FALSE)
geo.dist <- read.csv("BOX_geodist.txt",
sep="\t",
header = FALSE,
stringsAsFactors = FALSE)
coords <- read.csv("coords.out.txt",
sep="\t",
header = TRUE,
stringsAsFactors = FALSE)
popmap.file <- read.csv("BOX_popmap_FINAL4construct.txt",
sep="\t",
header = FALSE,
stringsAsFactors = FALSE)
geo.dist <- read.csv("BOX_geodist.txt",
sep="\t",
header = FALSE,
stringsAsFactors = FALSE)
coords <- read.csv("coords.out.txt",
sep="\t",
header = TRUE,
stringsAsFactors = FALSE)
geo.dist <- matrix(geo.dist)
coords <- matrix(coords)
construct.run <- conStruct(spatial = TRUE,
K = 1,
freqs = pop.data.matrix,
geoDist = geo.dist,
coords = coords,
prefix = "test",
n.chains = 1,
n.iter = 1000,
make.figs = TRUE,
save.files = TRUE)
geo.dist <- read.csv("BOX_geodist.txt",
sep="\t",
header = FALSE,
stringsAsFactors = FALSE)
coords <- read.csv("coords.out.txt",
sep="\t",
header = TRUE,
stringsAsFactors = FALSE)
View(geo.dist)
construct.run <- conStruct(spatial = TRUE,
K = 1,
freqs = pop.data.matrix,
geoDist = geo.dist[,2:ncol(geo.dist)],
coords = coords,
prefix = "test",
n.chains = 1,
n.iter = 1000,
make.figs = TRUE,
save.files = TRUE)
geo.dist <- matrix(geo.dist[,2:ncol(geo.dist)])
construct.run <- conStruct(spatial = TRUE,
K = 1,
freqs = pop.data.matrix,
geoDist = geo.dist,
coords = coords,
prefix = "test",
n.chains = 1,
n.iter = 1000,
make.figs = TRUE,
save.files = TRUE)
geo.dist <- matrix(geo.dist[,2:ncol(geo.dist)])
geo.dist <- read.csv("BOX_geodist.txt",
sep="\t",
header = FALSE,
stringsAsFactors = FALSE)
geo.dist <- geo.dist[,2:ncol(geo.dist)]
View(geo.dist)
class(geo.dist)
geo.distMat <- data.matrix(geo.dist)
construct.run <- conStruct(spatial = TRUE,
K = opt$K,
freqs = pop.data.matrix,
geoDist = geo.distMat,
coords = coords,
prefix = opt$prefix,
n.chains = opt$nchains,
n.iter = opt$niter,
make.figs = TRUE,
save.files = TRUE)
construct.run <- conStruct(spatial = TRUE,
K = 1,
freqs = pop.data.matrix,
geoDist = geo.distMat,
coords = coords,
prefix = "test",
n.chains = 1,
n.iter = 1000,
make.figs = TRUE,
save.files = TRUE)
coordMat <- data.matrix(coords)
construct.run <- conStruct(spatial = TRUE,
K = 1,
freqs = pop.data.matrix,
geoDist = geo.distMat,
coords = coordMat,
prefix = "test",
n.chains = 1,
n.iter = 1000,
make.figs = TRUE,
save.files = TRUE)
print(length(geo.dist))
vignette(topic="visualize-results",package="conStruct")
setwd("~/Work/Scripts/construct_pipeline")
setwd("~/Work/Lab_Mates/gila_hybridDetective/R_scripts")
setwd("~/Work/Lab_Mates/gila_hybridDetective/gila_FINALrun200/finalRun/NH.Results/gila_combined_Zed.txt_Results")
path.hold <- getwd()
pofz <- "gila_combined_Zed.txt_PofZ.txt"
nh_plotR(paste0(path.hold, pofz))
library("hybriddetective")
nh_plotR(paste0(path.hold, pofz))
pofz <- "/gila_combined_Zed.txt_PofZ.txt"
nh_plotR(paste0(path.hold, pofz))
vignette(topic="model-comparison",package="conStruct")
library("conStruct")
if (!require("optparse")) stop("Error: The required package optparse is not installed")
library("optparse")
# Set command-line arguments
option_list <- list(make_option(c("-k", "--minK"),
type="integer",
default=NULL,
help="Specify minimum K value (lower case k)",
metavar="integer"),
make_option(c("-K", "--maxK"),
type="integer",
default=NULL,
help="Specify maximum K value (upper case K)",
metavar="integer"),
make_option(c("-r", "--nreps"),
type="integer",
default=NULL,
help="Specify number of cross-validation replicates",
metavar="integer"),
make_option(c("-t", "--trainProp"),
type="numeric",
default=0.9,
help="Specify training proportion for cross-validation",
metavar="numeric"),
make_option(c("-n", "--nodes"),
type="integer",
default=NULL,
help="Specify number of CPU cores for parallelization",
metavar="integer"))
opt_parser <- OptionParser(option_list=option_list,
description="Rscript to run cross-validation for conStruct")
opt2 <- parse_args(opt_parser)
load("environment.RData")
setwd("~/Work/Scripts/construct_pipeline")
load("environment.RData")
for (i in opt2$k:opt2$K) {
all.prefixes <- c(paste0(opt$prefix, "_spK", i))
}
load("box_cs_nspK3_conStruct.results.Robj")
load("box_cs_nspK2_conStruct.results.Robj")
load(paste0(all.sp[1], "_data.block.Robj"))
load(paste0(all.sp[1], "_conStruct.results.Robj"))
