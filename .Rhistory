setwd("~/Work/BOX_Turtle_Genomics/Analyses/BFD/BFD/R_scripts")
setwd("~/Work/BOX_Turtle_Genomics/Analyses/BFD/BFD/alignment_original")
library("devtools")
#devtools::install_github("bbanbury/phrynomics")
library("phrynomics")
infile <- "BOX_popFilt_withOG.nex"
outfile <- "BOX_popFilt_biallelic_variant_withOG.phy"
snps <- ReadSNP(infile)
snps <- RemoveNonBinary(snps)
snps <- RemoveInvariantSites(snps)
WriteSNP(snps, file=outfile, format="phylip", missing="N")
#!/usr/bin/env Rscript
# Make sure dependencies are installed and then load them
if (!require("conStruct")) stop("Error: The required package conStruct is not installed")
if (!require("optparse")) stop("Error: The required package optparse is not installed")
install.packages("optparse")
#!/usr/bin/env Rscript
# Make sure dependencies are installed and then load them
if (!require("conStruct")) stop("Error: The required package conStruct is not installed")
if (!require("optparse")) stop("Error: The required package optparse is not installed")
# Set command-
setwd("~/Work/Scripts/construct_pipeline")
View(conStruct.data$coords)
View(conStruct.data$coords)
View(conStruct.data$coords)
View(conStruct.data$coords)
structure2conStruct(infile = str.file,
onerowperind = FALSE,
start.loci = 3,
missing.datum = -9,
outfile = BOX.construct)
structure2conStruct(infile = str.file,
onerowperind = FALSE,
start.loci = 3,
missing.datum = -9,
outfile = "construct.out")
# Read input files specified on command-line
str.file <- read.infile(opt$str)
popmap.file <- read.infile(opt$popmap)
## FUNCTIONS ##
read.infile <- function(infile) {
if(!is.null(infile)) {
if (!file.exists(infile)) {
stop("Error: Could not find required input file; aborting program")
}
file <- read.table(infile,
header = FALSE,
sep = "\t",
stringsAsFactors = FALSE)
return(file)
}
else {
return(NULL)
}
}
# Read input files specified on command-line
str.file <- read.infile(opt$str)
popmap.file <- read.infile(opt$popmap)
if (!require("conStruct")) stop("Error: The required package conStruct is not installed")
if (!require("optparse")) stop("Error: The required package optparse is not installed")
structure2conStruct(infile = str.file,
onerowperind = FALSE,
start.loci = 3,
missing.datum = -9,
outfile = "construct.out")
# Set command-line arguments
option_list <- list(make_option(c("-s", "--str"),
type="character",
default=NULL,
help="Input structure filename; default = NULL",
metavar="character"),
make_option(c("-p", "--popmap"),
type="character",
default=NULL,
help="Input popmap filename; default = NULL",
metavar="character"),
make_option(c("-w", "--wd"),
type="character",
default="./",
metavar="character",
help="Set working directory; default = ./"))
opt_parser <- OptionParser(option_list=option_list,
description="Rscript to run conStruct")
opt <- parse_args(opt_parser)
# Read input files specified on command-line
str.file <- read.infile(opt$str)
popmap.file <- read.infile(opt$popmap)
structure2conStruct(infile = str.file,
onerowperind = FALSE,
start.loci = 3,
missing.datum = -9,
outfile = "construct.out")
afreq <- structure2conStruct(infile = opt$str,
onerowperind = FALSE,
start.loci = 3,
missing.datum = -9,
outfile = "construct.out")
afreq <- structure2conStruct(infile = opt$str,
onerowperind = FALSE,
start.loci = 3,
missing.datum = -9)
read.csv("BOX_filteredPops_FINAL.str",
sep="\t",
header=FALSE,
stringsAsFactors = FALSE)
str.file <- read.csv("BOX_filteredPops_FINAL.str",
sep="\t",
header=FALSE,
stringsAsFactors = FALSE)
popmap.file <- read.csv("BOX_popmap_FINAL4construct.txt",
sep="\t",
header = FALSE,
stringsAsFactors = FALSE)
geo.dist <- read.csv("BOX_geodist.csv",
header = FALSE,
stringsAsFactors = FALSE)
coords <- read.csv("coords.out.csv",
header = TRUE,
stringsAsFactors = FALSE)
afreq <- structure2conStruct(infile = "BOX_filteredPops_FINAL.str",
onerowperind = FALSE,
start.loci = 3,
missing.datum = -9,
outfile = "construct.out")
afreq <- structure2conStruct(infile = "BOX_filteredPops_FINAL.str",
onerowperind = FALSE,
start.loci = 3,
missing.datum = -9,
outfile = "construct.out")
pop.data.matrix <- matrix(NA,nrow=nrow(geo.dist),ncol=ncol(conStruct.data))
for(i in 1:nrow(pop.data.matrix)){
pop.data.matrix[i,] <- colMeans(
afreq[
which(pop.index==i),,
drop=FALSE
],na.rm=TRUE
)
}
pop.data.matrix <- matrix(NA,nrow=nrow(geo.dist),ncol=ncol(afreq))
for(i in 1:nrow(pop.data.matrix)){
pop.data.matrix[i,] <- colMeans(
afreq[
which(pop.index==i),,
drop=FALSE
],na.rm=TRUE
)
}
pop.index <- str.file$V2
pop.data.matrix <- matrix(NA,nrow=nrow(geo.dist),ncol=ncol(afreq))
for(i in 1:nrow(pop.data.matrix)){
pop.data.matrix[i,] <- colMeans(
afreq[
which(pop.index==i),,
drop=FALSE
],na.rm=TRUE
)
}
View(conStruct.data)
View(afreq)
for(i in 1:nrow(pop.data.matrix)){
pop.data.matrix[i,] <- colMeans(
afreq[
which(pop.index==i),,
drop=FALSE
],na.rm=TRUE
)
}
View(conStruct.data)
View(afreq)
pop.index <- str.file$V2
View(geo.dist)
pop.data.matrix <- matrix(NA,nrow=nrow(coords),ncol=ncol(afreq))
for(i in 1:nrow(pop.data.matrix)){
pop.data.matrix[i,] <- colMeans(
afreq[
which(pop.index==i),,
drop=FALSE
],na.rm=TRUE
)
}
pop.data.matrix <- matrix(NA,nrow=nrow(coords),ncol=ncol(afreq))
